using System;

class CoinChangeRecursive
{
    public int MinCoins(int[] coins, int sum)
   {
       var minCount = MinCoins(coins, coins.Length, sum);

       if (minCount >= int.MaxValue - 1) return -1;

       return minCount;
   }

    private int MinCoins(int[] coins, int n, int sum)
    {
        // Базовий випадок: якщо сума дорівнює 0, то не потрібно використовувати жодної монети.
        if (sum == 0) return 0;

        // Якщо сума від'ємна або монети закінчились, то неможливо скласти суму.
        if (sum < 0 || n <= 0) return int.MaxValue - 1;

        int withCoin = 1 + MinCoins(coins, n, sum - coins[n - 1]); // use (int.MaxValue - 1) as default to avoid int overflow here
        int withoutCoin = MinCoins(coins, n - 1, sum);

        return Math.Min(withCoin, withoutCoin);
    }
}

public static void Main(string[] args)
{
    int[] coins = { 1, 2, 5 };
    int sum = 11;

    int minCoins = new CoinChangeRecursive().MinCoins(coins, sum);

    if (minCoins == -1)
        Console.WriteLine("Не можливо скласти суму " + sum + " монетами.");
    else
        Console.WriteLine("Мінімальна кількість монет для суми " + sum + " гривень: " + minCoins);
}

__Time Complexity O(cointsCount^sum); Exponential time__;
__Auxiliary Space Complexity O(sum*cointsCount)__;

https://www.enjoyalgorithms.com/blog/minimum-coin-change
